#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.16
# from Racc grammar file "".
#

require 'racc/parser.rb'
class STSParser < Racc::Parser

module_eval(<<'...end sts_parse.ry/module_eval...', 'sts_parse.ry', 101)

def parse( tokens )
  @tokens = tokens

  @yydebug = true
  do_parse()
end

def next_token
  @tokens.shift
end

def on_error(t, val, vstack)
  raise Racc::ParseError, sprintf(
    "Parse error on value %s (%s)\n",
    val.inspect, token_to_str(t) || '?' )
end

...end sts_parse.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
    55,    49,    84,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    55,     4,     5,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    29,    11,    11,    12,    12,    14,    13,    13,    22,    15,
    22,    23,    24,    23,    24,    41,    17,    26,    23,    24,
    27,    31,    32,    33,    39,    39,    44,    39,    31,    46,
    39,    49,    50,    51,    83 ]

racc_action_check = [
    49,    51,    51,    49,    49,    49,    49,    49,    49,    49,
    49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
    49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
    53,     0,     1,    53,    53,    53,    53,    53,    53,    53,
    53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
    53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
    18,     2,    17,     2,    17,     3,     2,    17,    18,     5,
    11,    18,    18,    11,    11,    31,     6,    12,    31,    31,
    13,    22,    25,    26,    27,    32,    34,    35,    39,    42,
    43,    44,    46,    47,    50 ]

racc_action_pointer = [
    21,    32,    59,    55,   nil,    69,    66,   nil,   nil,   nil,
   nil,    59,    64,    69,   nil,   nil,   nil,    60,    57,   nil,
   nil,   nil,    69,   nil,   nil,    71,    72,    73,   nil,   nil,
   nil,    64,    74,   nil,    76,    76,   nil,   nil,   nil,    76,
   nil,   nil,    79,    79,    83,   nil,    87,    83,   nil,   -11,
    88,    -7,   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -65,   -69,   -69,   -66,   -68,   -69,   -65,    -3,    -4,    -5,
    -6,   -10,   -15,   -69,   -67,    87,    -1,   -68,   -69,   -11,
   -13,   -14,   -29,   -27,   -28,   -69,   -69,   -19,    -2,    -7,
   -12,   -69,   -17,   -16,   -69,   -20,   -22,   -23,   -24,   -25,
   -26,   -29,   -69,   -18,   -69,   -21,   -69,   -69,   -31,   -33,
   -69,   -69,   -32,   -34,   -36,   -37,   -38,   -39,   -40,   -41,
   -42,   -43,   -44,   -45,   -46,   -47,   -48,   -49,   -50,   -51,
   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,   -60,   -61,
   -62,   -63,   -64,    -8,    -9,   -30,   -35 ]

racc_goto_table = [
     7,    45,     2,    19,    21,    48,     1,     6,    16,    45,
    30,    21,    85,    35,    18,    28,    54,    25,    43,    42,
    86,    34,    47,    40,    52,    53 ]

racc_goto_check = [
     4,    17,     2,    13,    15,    19,     1,     3,     2,    17,
    13,    15,    19,    16,     8,     4,    22,     9,    16,    10,
    22,    11,    12,    14,    20,    21 ]

racc_goto_pointer = [
   nil,     6,     2,     5,    -2,   nil,   nil,   nil,     3,     5,
   -13,    -6,   -22,    -8,    -8,    -7,   -14,   -34,   nil,   -39,
   -25,   -24,   -33,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     8,     9,    10,   nil,   nil,
   nil,   nil,   nil,   nil,    20,    38,   nil,    36,    37,   nil,
   nil,   nil,   nil,     3 ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 42, :_reduce_1,
  3, 44, :_reduce_2,
  1, 44, :_reduce_3,
  1, 45, :_reduce_4,
  1, 45, :_reduce_5,
  1, 45, :_reduce_6,
  3, 46, :_reduce_7,
  7, 47, :_reduce_8,
  7, 48, :_reduce_9,
  0, 49, :_reduce_10,
  1, 49, :_reduce_11,
  2, 49, :_reduce_12,
  1, 54, :_reduce_13,
  1, 54, :_reduce_14,
  0, 50, :_reduce_15,
  2, 50, :_reduce_16,
  0, 51, :_reduce_17,
  1, 51, :_reduce_18,
  0, 52, :_reduce_19,
  1, 52, :_reduce_20,
  2, 57, :_reduce_21,
  1, 57, :_reduce_22,
  1, 58, :_reduce_23,
  1, 58, :_reduce_24,
  1, 59, :_reduce_25,
  3, 56, :_reduce_26,
  1, 55, :_reduce_27,
  1, 55, :_reduce_28,
  1, 55, :_reduce_29,
  3, 53, :_reduce_30,
  1, 53, :_reduce_31,
  2, 60, :_reduce_32,
  0, 61, :_reduce_33,
  1, 61, :_reduce_34,
  2, 62, :_reduce_35,
  1, 62, :_reduce_36,
  1, 63, :_reduce_37,
  1, 63, :_reduce_38,
  1, 63, :_reduce_39,
  1, 63, :_reduce_40,
  1, 63, :_reduce_41,
  1, 63, :_reduce_42,
  1, 63, :_reduce_43,
  1, 63, :_reduce_44,
  1, 63, :_reduce_45,
  1, 63, :_reduce_46,
  1, 63, :_reduce_47,
  1, 63, :_reduce_48,
  1, 63, :_reduce_49,
  1, 63, :_reduce_50,
  1, 63, :_reduce_51,
  1, 63, :_reduce_52,
  1, 63, :_reduce_53,
  1, 63, :_reduce_54,
  1, 63, :_reduce_55,
  1, 63, :_reduce_56,
  1, 63, :_reduce_57,
  1, 63, :_reduce_58,
  1, 63, :_reduce_59,
  1, 63, :_reduce_60,
  1, 63, :_reduce_61,
  1, 63, :_reduce_62,
  1, 63, :_reduce_63,
  1, 63, :_reduce_64,
  0, 43, :_reduce_none,
  1, 43, :_reduce_none,
  2, 64, :_reduce_none,
  1, 64, :_reduce_none ]

racc_reduce_n = 69

racc_shift_n = 87

racc_token_table = {
  false => 0,
  :error => 1,
  :TOP_INST => 2,
  :TOP_INST_END => 3,
  :DATA_START => 4,
  :DATA_SCRIPT => 5,
  :DATA_END => 6,
  :PROC_START => 7,
  :PROC_INST => 8,
  :PROC_END => 9,
  :TERMIN => 10,
  :IDENT => 11,
  :ASSIGN => 12,
  :COLON => 13,
  :NUMBER => 14,
  :STRING => 15,
  :P_EQ => 16,
  :P_DEQ => 17,
  :P_MULT => 18,
  :P_PLUS => 19,
  :P_MINUS => 20,
  :P_INTDEV => 21,
  :P_MOD => 22,
  :P_IN => 23,
  :P_AND => 24,
  :P_OR => 25,
  :P_DAND => 26,
  :P_DOR => 27,
  :P_LT => 28,
  :P_ST => 29,
  :P_LTE => 30,
  :P_STE => 31,
  :P_HAT => 32,
  :P_TILDE => 33,
  :P_COLON => 34,
  :P_LPAR => 35,
  :P_RPAR => 36,
  :P_LSQBR => 37,
  :P_RSQBR => 38,
  :P_COMMA => 39,
  :P_SLASH => 40 }

racc_nt_base = 41

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "TOP_INST",
  "TOP_INST_END",
  "DATA_START",
  "DATA_SCRIPT",
  "DATA_END",
  "PROC_START",
  "PROC_INST",
  "PROC_END",
  "TERMIN",
  "IDENT",
  "ASSIGN",
  "COLON",
  "NUMBER",
  "STRING",
  "P_EQ",
  "P_DEQ",
  "P_MULT",
  "P_PLUS",
  "P_MINUS",
  "P_INTDEV",
  "P_MOD",
  "P_IN",
  "P_AND",
  "P_OR",
  "P_DAND",
  "P_DOR",
  "P_LT",
  "P_ST",
  "P_LTE",
  "P_STE",
  "P_HAT",
  "P_TILDE",
  "P_COLON",
  "P_LPAR",
  "P_RPAR",
  "P_LSQBR",
  "P_RSQBR",
  "P_COMMA",
  "P_SLASH",
  "$start",
  "program",
  "opt_termins",
  "blocks",
  "block",
  "top_stmt",
  "data_block",
  "proc_block",
  "top_options",
  "data_engine_option",
  "data_options",
  "proc_options",
  "proc_stmts",
  "value_or_kv",
  "opt_primary",
  "kv",
  "options",
  "key_or_kv",
  "key",
  "proc_stmt",
  "optional_proc_stmt_options",
  "proc_stmt_options",
  "proc_primary",
  "termins" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'sts_parse.ry', 6)
  def _reduce_1(val, _values, result)
    result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 8)
  def _reduce_2(val, _values, result)
     val[0] << val[2] ; result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 9)
  def _reduce_3(val, _values, result)
     result = Array.new(1, val[0] )
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 11)
  def _reduce_4(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 12)
  def _reduce_5(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 13)
  def _reduce_6(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 15)
  def _reduce_7(val, _values, result)
    result = GramNode.new( :TOP_BLOCK,  val[0], val[1] )
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 17)
  def _reduce_8(val, _values, result)
     val[1] ; result = GramNode.new( :DATA_BLOCK, GramNode.new(:ident, val[2]), val[3], GramNode.new( :string, val[5]))
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 19)
  def _reduce_9(val, _values, result)
     result = GramNode.new( :PROC_BLOCK, GramNode.new(:ident, val[1]), val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 21)
  def _reduce_10(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 22)
  def _reduce_11(val, _values, result)
     result = Array.new(1, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 23)
  def _reduce_12(val, _values, result)
     val[0] << val[1]; result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 25)
  def _reduce_13(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 26)
  def _reduce_14(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 28)
  def _reduce_15(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 29)
  def _reduce_16(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 31)
  def _reduce_17(val, _values, result)
    result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 32)
  def _reduce_18(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 34)
  def _reduce_19(val, _values, result)
    result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 35)
  def _reduce_20(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 37)
  def _reduce_21(val, _values, result)
     val[0] << val[1]; result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 38)
  def _reduce_22(val, _values, result)
     result = Array.new(1, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 40)
  def _reduce_23(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 41)
  def _reduce_24(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 43)
  def _reduce_25(val, _values, result)
     result = GramNode.new(:option, val[0], true )
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 45)
  def _reduce_26(val, _values, result)
     result = GramNode.new(:option, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 47)
  def _reduce_27(val, _values, result)
     result = GramNode.new(:num   , val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 48)
  def _reduce_28(val, _values, result)
     result = GramNode.new(:string, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 49)
  def _reduce_29(val, _values, result)
     result = GramNode.new(:ident , val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 51)
  def _reduce_30(val, _values, result)
     val[0] << val[2]; result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 52)
  def _reduce_31(val, _values, result)
     result = Array.new(1, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 54)
  def _reduce_32(val, _values, result)
     result = GramNode.new( :proc_stmt , GramNode.new(:ident, val[0]) , val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 56)
  def _reduce_33(val, _values, result)
    result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 57)
  def _reduce_34(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 59)
  def _reduce_35(val, _values, result)
     val[0] << val[1] ; result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 60)
  def _reduce_36(val, _values, result)
     result = Array.new(1, val[0] )
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 62)
  def _reduce_37(val, _values, result)
     result = GramNode.new(:ident , val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 63)
  def _reduce_38(val, _values, result)
     result = GramNode.new(:num   , val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 64)
  def _reduce_39(val, _values, result)
     result = GramNode.new(:string, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 65)
  def _reduce_40(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 66)
  def _reduce_41(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 67)
  def _reduce_42(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 68)
  def _reduce_43(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 69)
  def _reduce_44(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 70)
  def _reduce_45(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 71)
  def _reduce_46(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 72)
  def _reduce_47(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 73)
  def _reduce_48(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 74)
  def _reduce_49(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 75)
  def _reduce_50(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 76)
  def _reduce_51(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 77)
  def _reduce_52(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 78)
  def _reduce_53(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 79)
  def _reduce_54(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 80)
  def _reduce_55(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 81)
  def _reduce_56(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 82)
  def _reduce_57(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 83)
  def _reduce_58(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 84)
  def _reduce_59(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 85)
  def _reduce_60(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 86)
  def _reduce_61(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 87)
  def _reduce_62(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 88)
  def _reduce_63(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'sts_parse.ry', 89)
  def _reduce_64(val, _values, result)
     result = GramNode.new(:sign, val[0])
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class STSParser


require_relative("sts_gram_node.rb")

module STSParserDriver
  def self.run( tokens )
    parser = STSParser.new

    begin
      gram_tree = parser.parse( tokens )
    rescue Racc::ParseError => e
      puts "Parser error detected"
      puts e.message
      runtime_error = RuntimeError.new( e.message );
      runtime_error.set_backtrace( e.backtrace ); e.set_backtrace([])
      raise runtime_error
    end
  end
end
