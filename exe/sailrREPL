#!/usr/bin/env ruby

## Parse argumnet and initialize setting

require 'optparse'
opt = OptionParser.new
params = {}
new_params = {}

opt.on('--thread')
opt.on('--procs-gem VAL')
opt.parse!(ARGV, into: params)

fork_or_thread = params[:thread]
if fork_or_thread
  new_params[:fork_or_thread] = "thread"
else
  new_params[:fork_or_thread] = "fork"
end

if new_params[:fork_or_thread] == "fork"
  if Process.respond_to?(:fork)
    # "fork" is used and system has "fork" implementation.
  else
    raise 'fork is not implemented on this system. Please try to run sailrREPL with "--thread" option'
  end
end

if params[:"procs-gem"]
  if params[:"procs-gem"] =~ /[a-zA-Z,_-]+/ 
    if params[:"procs-gem"].include?( "," )
      new_params[:"procs_gem"] = params[:"procs-gem"].split(",")
    else
      new_params[:"procs_gem"] = params[:"procs-gem"]
    end
  else
    raise "--procs-gem option takes gem name or gem names separated with comma(,)."
  end
else
  # nothing to be specified.
end

## Main

require("statsailr")

reader, writer = IO.pipe

child_service = StatSailr::Service.start( reader , writer, **new_params )

prompt = "(^^)v: "
line = ""
print prompt
while true
  line = STDIN.gets()
  if line.nil? # When C-d
    puts "C-d : Parent process finishes. Close pipe."
    writer.close
    break
  elsif line =~ /^!exit/
    puts "!exit : Parent process finishes. Close pipe."
    writer.close
    break
  else
    writer.write line
    print prompt
  end
end

case fork_or_thread
when "fork"
  Process.waitpid(child_service)
when "thread"
  child_service.join()
end
